/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useFrame } from '@react-three/fiber';
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from 'three';

function getRandomColor() {
    let letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

function getRandomNum(min, max) {
    return Math.random() * (max - min) + min;
}

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
  }  

//TAU = 1 full rotation
const TAU = Math.PI * 2;
//timer variable set outside below export, since clicking for new color sets new state and would reset timer? or something
let timer = 0;
//timer count at which resets
const timerMax = 500;

//sheep animation global variables
let newAnimationPlease = false;
let newMovementPlease = false;
let whichAnimation = null;
let newSpawn = true;

//sheep position and angles
let newYangle = 0;
let newXposition = 0;
let newZposition = 0;

function timerTicker() {
    //adds to timer - if timer > 1000, randomly starts new animation
    timer += 1;
    newAnimationPlease = false;
    if (timer >= timerMax) {
        timer = 0;
        newAnimationPlease = true;
        console.log("hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii")
    }
    console.log(timer);
}

export default function Model({ ...props }) {
    const ref = useRef();
    const { nodes, materials, animations } = useGLTF(
        "/NEWSheepModelwAnimations3.gltf"
    );
    const { actions } = useAnimations(animations, ref);
    const randomColor = getRandomColor();

    {/* makes sheep rotate */}
    // useFrame((state, delta) => (ref.current.rotation.y += 0.01));

    // Upon click, changes color
    const [sheepColor, setSheepColor] = useState(randomColor);

    //list available sheep animation
    //console.log(actions);

    //actions that work: 
    /* 
        NEWSheepModelwAnimations3.gltf
        -zzzaTPose
        -HeadDown
        -Eating
        -HeadUp
        -Walking
        -Spawning - "SpawnAnimation"
    */

    //animation trigger and moving sheep
    function sheepRandomAnimations() {
        console.log('imannoying');
        if (newSpawn) {
            whichAnimation = "SpawnAnimation";
            newSpawn = false;
            actions.Spawning.setLoop(THREE.LoopOnce).play();
            timer = 0;
        } else {
            //selects new Animation every timerMax frames (which sets newAnimationPlease to true)
            if (newAnimationPlease) {
                console.log('entered');
                //3 options: 
                let nextMove = Math.random();
                newMovementPlease = false;
                //1) stand still
                if (nextMove < 0.333) {
                    whichAnimation = "TPose";
                } else if (nextMove < 0.666) {
                    whichAnimation = "Eating";
                } else {
                    newMovementPlease = true;
                    whichAnimation = "Moving";
                }

            }
        }
        console.log(whichAnimation);
        
        switch (whichAnimation) {
            case "SpawnAnimation":
                actions.Spawning.reset();
                actions.Spawning.setLoop(THREE.LoopOnce).play();
                break;
            case "TPose":
                actions.zzzaTPose.reset();
                actions.zzzaTPose.setLoop(THREE.LoopOnce).play();
                break;
            case "Eating": 
                actions.Walking.reset();
                actions.Walking.setLoop(THREE.LoopOnce, timerMax/30).play();
                break;
        }
    }

    //NOTE: 1 full ref.current.rotation.axis = 6.28318... (TAU)
    function sheepRandomMovements() {
        timerTicker();

        //newMovementPlease, whichAnimation are set in sheepRandomAnimations()
        if (newMovementPlease) {
            newYangle = getRandomNum(0, TAU);
            ref.current.rotation.y = newYangle;
            newXposition = Math.cos(newYangle);
            newZposition = Math.sin(newYangle);
            //above calculated w/ https://gamedev.stackexchange.com/questions/192379/move-2d-rotating-object-in-its-facing-direction
        }

        if(whichAnimation === "Walking") {
            ref.current.position.x += newXposition/100;
            ref.current.position.z -= newZposition/100;
        }
    }

    //animation trigger
    useEffect(() => {
        sheepRandomAnimations()
    })

    if (timer >= timerMax) {
        sheepRandomAnimations();
    }

    //move sheep location, rotation
    useFrame((state, delta) => (
        sheepRandomMovements()
    ));

    //spawns new sheep on click
    function changeClickedSheep() {
        newSpawn = true;
        setSheepColor(sheepColor => getRandomColor());
    } 


 
    return (
        <group ref={ref} {...props} dispose={null}>
            <group name="Scene" >
                <group name="Armature" scale={1}>
                    <primitive object={nodes.Bone} />
                    <skinnedMesh
                        name="Sheep"
                        geometry={nodes.Sheep.geometry}
                        /* material={materials.Material} */
                        skeleton={nodes.Sheep.skeleton} >
                        <meshStandardMaterial color={sheepColor} />
                    </skinnedMesh>
                </group>
                <mesh 
                    scale={1.25}
                    onClick={() => changeClickedSheep()}
                    position={[0, 0.6, 0]}
                >
                    <boxGeometry args={[1, 1, 1,]} />
                    <meshStandardMaterial
                    transparent={true}
                    opacity={0.5} />
                </mesh>
            </group>
        </group>
    );
}


useGLTF.preload("/sheepModelwAnimations.gltf");